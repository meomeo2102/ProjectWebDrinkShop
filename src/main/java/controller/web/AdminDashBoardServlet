package controller.web;

import dao.ProductDAO;
import dao.UserDAO;
import models.Product;
import models.User;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.util.List;

@WebServlet("/admin/dashboard")
public class AdminDashboardServlet extends HttpServlet {
    private UserDAO userDAO;
    private ProductDAO productDAO;

    @Override
    public void init() throws ServletException {
        Connection connection = (Connection) getServletContext().getAttribute("DBConnection");
        userDAO = new UserDAO(connection);
        productDAO = new ProductDAO();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            // Lấy danh sách tất cả người dùng
            List<User> userList = userDAO.getAllUsers();
            request.setAttribute("userList", userList);

            // Lấy danh sách tất cả sản phẩm
            List<Product> productList = productDAO.getAllProducts();
            request.setAttribute("productList", productList);

            // Forward dữ liệu đến trang JSP
            request.getRequestDispatcher("/admin/dashboard.jsp").forward(request, response);
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Đã xảy ra lỗi khi xử lý yêu cầu.");
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");

        try {
            if ("deleteUser".equals(action)) {
                int userId = Integer.parseInt(request.getParameter("userId"));
                boolean isDeleted = userDAO.deleteUser(userId);

                if (isDeleted) {
                    request.setAttribute("message", "Xóa người dùng thành công.");
                } else {
                    request.setAttribute("error", "Không thể xóa người dùng.");
                }
            } else if ("deleteProduct".equals(action)) {
                int productId = Integer.parseInt(request.getParameter("productId"));
                productDAO.deleteProduct(productId);

                request.setAttribute("message", "Xóa sản phẩm thành công.");
            }

            // Tải lại dữ liệu sau khi xử lý
            doGet(request, response);

        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Đã xảy ra lỗi khi xử lý yêu cầu.");
        }
    }
}
